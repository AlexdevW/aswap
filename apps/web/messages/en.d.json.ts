// This file is auto-generated by next-intl, do not edit directly.
// See: https://next-intl.dev/docs/workflows/typescript#messages-arguments

declare const messages: {
  HomePage: {
    title: "Aswap Decentralized Exchange"
    description: "Welcome to our decentralized exchange platform. Trade tokens and provide liquidity with ease, enjoying a secure and fast blockchain trading experience."
    swapButton: "Swap Tokens"
    poolButton: "Manage Liquidity"
    featuresTitle: "Key Features"
    feature1Title: "Fast Trading"
    feature1: "Fast and secure token swaps with low slippage and high efficiency"
    feature2Title: "Earn Rewards"
    feature2: "Earn fees by providing liquidity and maximize your asset returns"
    feature3Title: "Multi-wallet Support"
    feature3: "Connect with multiple wallets for convenient trading anytime, anywhere"
    ctaTitle: "Start Trading Now"
    ctaDescription: "Experience the future of decentralized finance in just a few steps"
    ctaButton: "Start Trading"
    about: "About Us"
  }
  LocaleSwitcher: {
    label: "Change language"
    locale: "{locale, select, zh {ðŸ‡¨ðŸ‡³ ä¸­æ–‡} en {ðŸ‡ºðŸ‡¸ English} other {Unknown}}"
  }
  Swap: {
    selectToken: "Select token"
    insufficientLiquidity: "{token} liquidity is insufficient"
    enterAmount: "Enter amount"
    noLiquidity: "No liquidity for the current pair"
    confirmingQuote: "Confirming final quote..."
    insufficientBalance: "Insufficient {token}"
    swap: "Swap"
    sell: "Sell"
    buy: "Buy"
    max: "Max"
  }
  Settings: {
    swap: "Swap"
    slippageLimit: "Slippage Limit"
    slippageInfo: "If the price changes more than this percentage, your transaction will be reverted."
    highSlippageWarning: "High slippage setting may result in significant trading losses."
    transactionDeadline: "Transaction Deadline"
    deadlineInfo: "If your transaction is pending for longer than this time, it will be canceled. (Max: 3 days)"
    auto: "Auto"
  }
  Faucet: {
    getTestToken: "Get Test Token"
  }
  Pool: {
    title: "Pool"
  }
  PoolTableColumns: {
    pool: "Pool"
    price: "Price"
    fee: "Fee"
    tickLower: "Tick Lower"
    tickUpper: "Tick Upper"
    tick: "Tick"
    liquidity: "Liquidity"
    actions: "Actions"
  }
  PoolTableToolbarActions: {
    positions: "Positions"
  }
  PoolForm: {
    selectTokenPair: "Select Token Pair"
    fee: "Fee"
    fee500: "0.05%"
    fee3000: "0.3%"
    fee10000: "1%"
    priceLower: "Price Lower"
    priceUpper: "Price Upper"
    initialPrice: "Initial Price"
    priceLowerDescription: "Participate in market trading within the price range"
    priceDescription: "{token1Symbol} per {token0Symbol}"
    addressLength: "Address must be 42 characters long"
    validEthereumAddress: "Must be a valid Ethereum address"
    validFeeLevel: "Please select a valid fee level"
    priceLowerEmpty: "Lower price cannot be empty"
    maxDecimals: "Up to 18 decimal places are supported"
    priceNotZero: "Price cannot be zero"
    priceUpperEmpty: "Upper price cannot be empty"
    priceEmpty: "Price cannot be empty"
    priceUpperGreater: "Upper price must be greater than lower price"
  }
  CreatePoolDialog: {
    submit: "Submit"
    creatingPool: "Creating Pool..."
    createPool: "Create Pool"
    cancel: "Cancel"
    addNewPool: "Add New Pool"
    successMessage: "Pool created successfully"
    new: "New"
  }
  CreatePositionsDialog: {
    submit: "Submit"
    approvingToken0: "Approving first token..."
    approvingToken1: "Approving second token..."
    creatingPosition: "Creating position..."
    authorizingToken0: "Authorizing first token..."
    authorizingToken1: "Authorizing second token..."
    token0Authorized: "First token authorized successfully"
    token1Authorized: "Second token authorized successfully"
    tokenAuthorizationFailed: "Failed to authorize token {token}: {error}"
    unknownError: "Unknown error"
    connectWallet: "Please connect your wallet first"
    positionCreated: "Position created successfully"
    createPosition: "Create Position"
    cancel: "Cancel"
    addNewPosition: "Add New Position"
  }
  PositionsForm: {
    selectTokenPair: "Select Token Pair"
    enterAmount: "Enter amount"
    addressLength: "Address must be 42 characters long"
    validEthereumAddress: "Must be a valid Ethereum address"
    indexMin: "Index cannot be less than 0"
    specifyLiquidity: "Specify the amount of tokens you are contributing to the liquidity."
    max: "Max"
  }
  PositionsTableColumns: {
    id: "ID"
    owner: "Owner"
    pool: "Pool"
    fee: "Fee"
    index: "Index"
    liquidity: "Liquidity"
    tickLower: "Tick Lower"
    tickUpper: "Tick Upper"
    tokensOwed0: "Tokens Owed 0"
    tokensOwed1: "Tokens Owed 1"
    feeGrowthInside0: "Fee Growth Inside 0"
    feeGrowthInside1: "Fee Growth Inside 1"
    actions: "Actions"
    remove: "Remove"
    collect: "Collect"
    error: "Error: {error}"
  }
  Menu: {
    title: "Menu"
    home: "Home"
    swap: "Swap"
    pool: "Pool"
    settings: "Settings"
  }
  Connect: {
    connectWallet: "Connect Wallet"
  }
  TransactionError: {
    userRejected: "User rejected the transaction"
    insufficientFunds: "Insufficient funds, please check your balance"
    timeout: "Transaction timed out, please try again later"
    networkError: "Network connection error, please check your internet connection"
    defaultError: "Operation failed: {errorMessage}"
    unknownError: "An unknown error occurred"
  }
  TokenSelect: {
    title: "Select Token"
    search: "Search tokens"
    noTokens: "No tokens available. Please claim test tokens in the trading interface"
  }
  NotFoundPage: {
    title: "Page Not Found"
    description: "Sorry, the page you are looking for does not exist or has been moved."
  }
  Error: {
    description: "<p>We've unfortunately encountered an error.</p><p>You can try to <retry>reload the page</retry> you were visiting.</p>"
    title: "Something went wrong!"
  }
}
export default messages
